{"version":3,"sources":["../../babel/src/spinner.js"],"names":["spinner","init","loadChans","then","putChans","$","on","bind","console","error","err","propeller","inertia","speed","Promise","resolve","reject","getJSON","Date","getTime","done","data","chans","shift","fail","cell","newIndex","getRandomIndex","checkIfNewChan","indexes","putChan","Math","floor","random","length","unique","forEach","oldIndex","chan","section","default","ballSrc","id","_id","ballv","attr","makeOffset","offset","left","top","ret","prefix"],"mappings":"aAAA,GAAMA,SAAU,CACdC,KAAM,eAAW,gBACf,KAAKC,SAAL,GACCC,IADD,CACM,UAAM,CACV,MAAKC,QAAL,EADU,CAEVC,EAAE,oBAAF,EAAwBC,EAAxB,CAA2B,UAA3B,CAAuC,MAAKF,QAAL,CAAcG,IAAd,OAAvC,CACD,CAJD,CAIG,kBAAOC,SAAQC,KAAR,CAAcC,CAAd,CAAP,CAJH,CADe,CAMfL,EAAE,UAAF,EAAcM,SAAd,CAAwB,CACtBC,QAAS,MADa,CAEtBC,MAAO,CAAC,CAFc,CAAxB,CAID,CAXa,CAYdX,UAAW,oBAAW,iBACpB,MAAO,IAAIY,QAAJ,CAAY,SAACC,CAAD,CAAUC,CAAV,CAAqB,CACtCX,EAAEY,OAAF,wBAAiC,GAAIC,KAAJ,GAAWC,OAAX,EAAjC,EACCC,IADD,CACM,WAAQ,CACZC,EAAKC,KAAL,CAAWC,KAAX,EADY,CAEZ,OAAKD,KAAL,CAAaD,EAAKC,KAFN,CAGZP,GACD,CALD,EAMCS,IAND,CAMM,kBAAOR,GAAON,CAAP,CAAP,CANN,CAOD,CARM,CASR,CAtBa,CAuBdN,SAAU,mBAAW,CACnB,GAAM,KAAKkB,KAAX,KACA,GAAIG,GAAO,CADX,CAEc,CAAP,EAFP,EAEiB,CACf,GAAIC,GAAW,KAAKC,cAAL,EAAf,CACI,KAAKC,cAAL,CAAoBF,CAApB,CAFW,GAGb,KAAKG,OAAL,CAAaJ,CAAb,EAAqBC,CAHR,CAIb,KAAKI,OAAL,CAAa,KAAKR,KAAL,CAAWI,CAAX,CAAb,CAAmCD,CAAnC,CAJa,CAKbA,GALa,CAOhB,CACF,CAlCa,CAmCdE,eAAgB,yBAAW,CACzB,MAAOI,MAAKC,KAAL,CAAWD,KAAKE,MAAL,GAAgB,KAAKX,KAAL,CAAWY,MAAtC,CACR,CArCa,CAsCdN,eAAgB,wBAASF,CAAT,CAAmB,CACjC,GAAIS,KAAJ,CAKA,MAJA,MAAKN,OAAL,CAAaO,OAAb,CAAqB,WAAY,CAC3BV,IAAaW,CADc,GAE7BF,IAF6B,CAGhC,CAHD,CAIA,CAAOA,CACR,CA7Ca,CA8CdN,UA9Cc,CA+CdC,QAAS,iBAACQ,CAAD,CAAOb,CAAP,CAAgB,CACvB,GAAIc,GAAUD,EAAKE,OAAL,CAAe,SAAf,CAA2B,QAAzC,CACEC,kBAA0BF,CAA1B,KAAqCD,EAAKI,EAA1C,aAAwDJ,EAAKK,GAA7D,EAAmEL,EAAKM,KAAL,OAAmBN,EAAKM,KAAxB,CAAkC,EAArG,CADF,CAEAvC,UAASoB,EAAK,CAAd,UACCoB,IADD,CACM,KADN,CACaJ,CADb,EAECI,IAFD,CAEM,OAFN,CAEeC,WAAWR,EAAKS,MAAhB,CAFf,CAGD,CArDa,CAAhB,CAwDA,QAASD,WAAT,CAAoBC,CAApB,CAA4B,CAC1B,GAAI,CAAEA,CAAN,CAAc,MAAO,EAAP,CACd,GAAIC,GAAOD,EAAO,CAAP,CAAX,CAAsBE,EAAMF,EAAO,CAAP,CAA5B,CACEG,EAAM,EADR,CAF0B,MAId,EAAR,KAAoB,CAAP,GAJS,CAKjBA,CALiB,EAOzB,qCAAyCd,OAAzC,CAAiD,WAAU,CAC1Dc,GAAUC,CAAV,yBAAwCH,CAAxC,QAAmDC,CAAnD,QACD,CAFA,CAPyB,CAUnBC,CAVmB,CAW3B","file":"spinner.js","sourcesContent":["const spinner = {\r\n  init: function() {\r\n    this.loadChans()\r\n    .then(() => {\r\n      this.putChans()\r\n      $('.spinner-container').on('dblclick', this.putChans.bind(this))\r\n    }, err => console.error(err))\r\n    $('#spinner').propeller({\r\n      inertia: 0.9993, \r\n      speed: -1\r\n    })\r\n  },\r\n  loadChans: function() {\r\n    return new Promise((resolve, reject) => {\r\n      $.getJSON(`/chans/chans.json?v=${new Date().getTime()}`)\r\n      .done(data => {\r\n        data.chans.shift()\r\n        this.chans = data.chans\r\n        resolve()\r\n      })\r\n      .fail(err => reject(err))\r\n    })\r\n  },\r\n  putChans: function() {\r\n    if (! this.chans) return;\r\n    let cell = 0\r\n    while (cell < 3) {\r\n      let newIndex = this.getRandomIndex()\r\n      if (this.checkIfNewChan(newIndex)) {\r\n        this.indexes[cell] = newIndex\r\n        this.putChan(this.chans[newIndex], cell)\r\n        cell++\r\n      }\r\n    }\r\n  },\r\n  getRandomIndex: function() {\r\n    return Math.floor(Math.random() * this.chans.length)\r\n  },\r\n  checkIfNewChan: function(newIndex) {\r\n    let unique = true\r\n    this.indexes.forEach(oldIndex => {\r\n      if (newIndex === oldIndex)\r\n        unique = false\r\n    })\r\n    return unique\r\n  },\r\n  indexes: [],\r\n  putChan: (chan, cell) => {\r\n    let section = chan.default ? 'default' : 'custom'\r\n    , ballSrc = `/chans/balls/${section}/${chan.id}.png?uid=${chan._id}${chan.ballv ? `&v=${chan.ballv}` : ''}`\r\n    $(`#bc-${cell+1} img`)\r\n    .attr('src', ballSrc)\r\n    .attr('style', makeOffset(chan.offset))\r\n  }\r\n}\r\n\r\nfunction makeOffset(offset) {\r\n  if (! offset) return '';\r\n  let left = offset[0], top = offset[1]\r\n  , ret = ''\r\n  if (left == 0 && top == 0) {\r\n    return ret\r\n  }\r\n  ;['', '-webkit-', '-ms-', '-moz-', '-o-'].forEach(prefix => {\r\n    ret += `${prefix}transform: translate(${left}px, ${top}px); `\r\n  })\r\n  return ret\r\n}"]}